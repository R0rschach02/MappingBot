#include <ESP32Servo.h>
#include <Wire.h>        // instantiate the Wire library
#include <TFLI2C.h>      // TFLuna-I2C Library v.0.2.0

#define zeilenAnzahl 2
#define spaltenAnzahl 5

Servo servoY;
Servo servoX;

const int servoPinY = 19;
const int servoPinX = 26;

TFLI2C tflI2C;

int16_t  tfDist;    // distance in centimeters
int16_t  tfAddr = TFL_DEF_ADR;  // use this default I2C address or
                                // set variable to your own value

void setup() 
{
  
  Serial.begin(115200);
  Wire.begin(); 
  
  ESP32PWM::allocateTimer(0);
  ESP32PWM::allocateTimer(1);
  ESP32PWM::allocateTimer(2);
  ESP32PWM::allocateTimer(3);
  
  servoX.setPeriodHertz(50);
  servoX.attach(servoPinX, 1500, 2500);

  //servoX.write(115);
  servoX.write(90);

  servoY.setPeriodHertz(50);
  servoY.attach(servoPinY, 1500, 2500);

  //servoY.write(150); // 90° ist der Mittelpunkt vom Y servo, 150 ist der max wert und 40 ist der min wert. 

  delay(2000);
}

void printArray( const int a[][ spaltenAnzahl ] ) 
{
   // loop through array's rows
   for ( int i = 0; i < zeilenAnzahl; i++ ) 
   {  
        
    Serial.print ("\n" ) ; // start new line of output
      // loop through columns of current row
      for ( int j = 0; j < spaltenAnzahl; j++ )
      {
       Serial.print( "\t");
      Serial.print (a[ i ][ j ] );
      }
      
   } 

} 

void radarFSM_Advanced()
{
  static unsigned long timeShot = 0;
  unsigned long timeNow = millis();

  static boolean backwardX= true; 
  static boolean backwardY= true; 
  
  static byte posX = 90; // zuvor 115°
  static byte posY = 90;

  // die x achse fängt bei der Koordinate 115° an und bewegt sich bis zu 30° 
  // die y achse bleibt fürs erste zentriert beim Wert 105 °. 
  // Der y wert soll anfangs runtergezählt werden bis x den wert 80 erreicht hat, danach soll wieder y hochgezählt werden bis x wieder bei 115° ist.
  // Ist der X wert bei 115° angekommen wird y wieder runtergezählt bis x die koordinate 80° erreicht hat. 

    if(timeNow - timeShot >= 29)
  {
    timeShot = timeNow;
    
    if( posX > 30 && backwardX == true )   // posX > 30 && backwardX == true
    {
      posX--;
      
      if ( posX <= 30 )
      {
        backwardX = false; 
      }
    }

    
    else if ( backwardX == false  )
    {
      posX++;  
      
      if( posX == 125)
      {
        backwardX = true; 
      }
    }

      // x achse wird sich dauernd von 30° bis 115° bewegen. Jetzt kommt die Y achse: 
  // Der y wert soll anfangs runtergezählt werden bis x den wert 80 erreicht hat, danach soll wieder y hochgezählt werden bis x wieder bei 30° ist.
  // Ist der X wert bei 115° angekommen wird y wieder runtergezählt bis x die koordinate 80° erreicht hat.

  
      if( ( posX <= 125 && posX >= 81) && backwardY == true )   // adder >= 0 && adder <= 179
    {
      posY-=1;
      
      if ( posX == 80 && posY == 65 )
      {
        backwardY = false; 
      }
    }

      else if ( ( posX >= 30 && posX == 80 ) &&  backwardY == false )
    {
      posY+=1;  
      
      if( posX == 125 && posY <= 90 )
      {
        backwardY = true; 
      }
    }
  

  Serial.printf(" X Achse: %u und Y Achse: %u \n" , posX, posY);
  servoX.write(posX);
  servoY.write(posY);
  }

  
  
}



void radarFSMxAxis()
{
  static unsigned long timeShot = 0;
  static unsigned long timeMessage = 0;
  unsigned long timeNow = millis();

  static boolean backwardX= true; 
  static boolean backwardY= true; 
  
  static byte posX = 90; // zuvor 115°

  //Brauche zweidimensionales array, eine dimension für aktuelle position in winkel und die zweite Dimension
  //Für die Distanz an der jeweiligen Position. 

  
  // In der ersten Zeile soll der Servo Winkel angegeben werden und in der zweiten zeile der dazugehörige abstand:
  

  int Angle2Dist[zeilenAnzahl][spaltenAnzahl]; // Im Index 0 befindet sich die Winkelzahl und im Index 1 der Distanzwert. 
    
  if( tflI2C.getData( tfDist, tfAddr)) // If read okay...
  {  

    if(timeNow - timeShot >= 29)
    {
      
    timeShot = timeNow;
    
    static int readingsPosX = 0;
    static int readingsTfDist = 0;
    
    Angle2Dist[0][readingsPosX] = posX; 
    readingsPosX++;
    
    Angle2Dist[1][readingsTfDist] = tfDist; 
    readingsTfDist++; 

    if ( readingsPosX >= spaltenAnzahl ) { readingsPosX = 0; }  // Index zurücksetzen damit keine Werte außerhalb des Arrays verloren gehen 
    if ( readingsTfDist >= spaltenAnzahl ) { readingsTfDist = 0; } // Index zurücksetzen damit keine Werte außerhalb des Arrays verloren gehen

    // Hier noch der Algorithmus um zu erfahren an welchem Winkel der größte Distanzwert war:

    static int MaxTfDistIndex = 0; 
    static int MaxPosX = 0; 
    
    MaxTfDistIndex++; 
    
    if( Angle2Dist[0][MaxTfDistIndex] > Angle2Dist[0][readingsTfDist] ) // Vergleiche bspw. index 0 mit index 1 um einen größeren Wert festzustellen
    {
        MaxPosX = Angle2Dist[0][MaxTfDistIndex]; // Speichere den größten Winkelwert
        MaxTfDistIndex = readingsTfDist; // springe zurück an die Stelle wo der letzte größte Distanzwert gefunden wurde. 
    }

    if ( MaxTfDistIndex >= spaltenAnzahl ) { MaxTfDistIndex = 0; } // Index zurücksetzen damit keine Werte außerhalb des Arrays verloren gehen


    // Schwenken auf X-Achse: Von 90° auf 30° mit 3 dekrementiert. 20 schleifendurchläufe bis zu Richtungswechsel. 
    
    if( posX >= 30 && backwardX == true )   // posX > 30 && backwardX == true
    {
      posX-=3;  // posX--;
      
      
      if ( posX <= 30 )
      {
        backwardX = false; 
      }
    }

    // Schwenken auf X-Achse: Von 30° auf 132° mit 3 inkrementiert. 44 schleifendurchläufe bis zu Richtungswechsel.
    
    else if ( backwardX == false  )
    {
      posX+=3; // posX++;  
      
      if( posX == 132) // posX == 126
      {
        backwardX = true; 
      }
    }

      
 
  //Serial.printf(" X Achse: %u  \n" , posX );
  
  servoX.write(posX);

  }
  


  if ( timeNow - timeMessage >= 500 )
  {
   timeMessage = timeNow; 
   Serial.print ("\n" ) ;
   Serial.println ("Values in array1 by row are: ") ;
   //Serial.print ("\n" ) ;
   printArray(Angle2Dist);    
  }
}

}

void radarFSM2() // Stößt nicht an Kante beim bewegen, x und y bewegen sich jeweils um 90°
{
  static unsigned long timeShot = 0;
  unsigned long timeNow = millis();

  static boolean backwardX= true; 
  static boolean backwardY= true; 
  
  static byte posX = 90; // zuvor 115°
  static byte posY = 150;


  
    if(timeNow - timeShot >= 29)
  {
    timeShot = timeNow;

    // Schwenken auf X-Achse: Von 90° auf 30° mit 3 dekrementiert. 20 schleifendurchläufe bis zu Richtungswechsel. 
    
    if( posX >= 30 && backwardX == true )   // posX > 30 && backwardX == true
    {
      posX-=3;  // posX--;
      
      if ( posX <= 30 )
      {
        backwardX = false; 
      }
    }

    // Schwenken auf X-Achse: Von 30° auf 132° mit 3 inkrementiert. 44 schleifendurchläufe bis zu Richtungswechsel.
    
    else if ( backwardX == false  )
    {
      posX+=3; // posX++;  
      
      if( posX == 132) // posX == 126
      {
        backwardX = true; 
      }
    }

      // Schwenken auf Y-Achse: Von 150° auf 40° mit 10 dekrementiert. 9 schleifendurchläufe bis zu Richtungswechsel.
  
      if(  posX == 30 && backwardY == true )   // adder >= 0 && adder <= 179
    {
      posY-=5;  // posY-=5; 
      
      if ( posY == 40 ) // posY == 45
      {
        backwardY = false; 
      }
    }

// Schwenken auf Y-Achse: Von 40° auf 150° mit 10 inkrementiert. 9 schleifendurchläufe bis zu Richtungswechsel.

      else if ( posX == 132 &&  backwardY == false ) // ( posX == 126 &&  backwardY == false )
    {
      posY+=5;  // posY+=5; 
      
      if( posY == 150 ) // posX == 125 && posY >= 125 und davor auf 120
      {
        backwardY = true; 
      }
    }
  

  Serial.printf(" X Achse: %u und Y Achse: %u \n" , posX, posY);
  servoX.write(posX);
  servoY.write(posY);
  }
}


void loop() 
{
  //radarFSMxAxis();  // Winkel und Distanz in 2d array speichern 
  //radarFSM_Advanced();
  radarFSM2(); // auf x und y achse entlang ohne an kante anzustoßen
}
